Build a basic CRUD app with a User model and Passport authentication in MEAN
=====

Create the following folders & files:
-----
- ./server.js
- ./app/controllers/
- ./app/controllers/index.server.controller.js
- ./app/controllers/users.server.controller.js
- ./app/models/
- ./app/models/user.server.model.js
- ./app/routes/
- ./app/routes/index.server.routes.js
- ./app/routes/users.server.routes.js
- ./app/views/
- ./app/views/index.ejs
- ./app/views/login.ejs
- ./app/views/register.ejs
- ./config/config.js
- ./config/mongoose.js
- ./config/env/
- ./config/env/development.js
- ./config/strategies/
- ./config/strategies/local.js
- ./config/strategies/passport.js
- ./config/express.js
- ./public/css/
- ./public/img/
- ./public/js/
- `touch server.js && mkdir app && cd app && mkdir controllers && mkdir models && mkdir routes && mkdir views && cd .. && mkdir config && cd config && mkdir env && cd .. && mkdir public && cd public && mkdir css && mkdir img && mkdir js && cd ..`
- `touch ./server.js ./app/controllers/ ./app/controllers/index.server.controller.js ./app/models/ ./app/routes/ ./app/routes/index.server.routes.js ./app/views/ ./app/views/index.ejs ./config/env/ ./config/express.js ./public/css/ ./public/img/ ./public/js/`

___


Instructions:
-----
- Run `npm init` to create the package.json file. When it asks for an entry point, enter server.js instead of index.js.

- Run `npm install connect ejs express mongoose body-parser passport passport-local connect-flash express-session --save`

- In the server.js file add the following code:

```javascript
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

var config = require('./config/config'),
  mongoose = require('./config/mongoose'),
  express = require('./config/express'),
  passport = require('./config/passport'),
  db = mongoose(),
  app = express(),
  passport = passport();

app.listen(config.port);

module.exports = app;
console.log(process.env.NODE_ENV  + ' server running at http://localhost:' + config.port);
```

- In the index.server.controller.js file add the following code:

```javascript
exports.render = function(req, res) {
  res.render('index', {
    title: 'MEAN MVC',
    user: req.user ? req.user.username : ''
  });
};
```

- In the index.server.routes.js file add the following code:

```javascript
module.exports = function(app) {
  var index = require('../controllers/index.server.controller');
  app.get('/', index.render);
};
```

- In the config/express.js file add the following code:

```javascript
var config = require('./config'),
  express = require('express'),
  bodyParser = require('body-parser'),
  passport = require('passport');
  flash = require('connect-flash');
  session = require('express-session');

module.exports = function() {
  var app = express();

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());
  app.use(flash());

  app.set('views', './app/views');
  app.set('view engine', 'ejs');

  app.use(passport.initialize());
  app.use(passport.session());
  app.use(session({
    saveUninitialized: true,
    resave: true,
    secret: 'OurSuperSecretCookieSecret'
  }));

  require('../app/routes/index.server.routes.js')(app);
  require('../app/routes/users.server.routes.js')(app);

  app.use(express.static('./public'));

  return app;
};
```

- In the app/views/index.ejs file add the following code:

```html
<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
</head>

<body>
  <div class="container">
    <% if ( user ) { %>
      <h2>Hello <%=user%> </h2>
      <a href="/logout">Logout</a>
    <% } else { %>
      <a href="/register">Register</a>
      <a href="/login">Login</a>
    <% } %>
  </div><!-- container -->
</body>
</html>
```

- In the config/env/development.js file add the following code:

```javascript
var port = 1337;

module.exports = {
  port: port,
  db: 'mongodb://localhost/your_database_name'
};
```

- In the config/mongoose.js file add the following code:

```javascript
var config = require('./config'),
  mongoose = require('mongoose');

module.exports = function() {
  var db = mongoose.connect(config.db);
  require('../app/models/user.server.model');
  return db;
};
```

- In the config/config.js file add the following code:

```javascript
module.exports = require('./env/' + process.env.NODE_ENV + '.js');
```

- Run `export NODE_ENV=development`

- In the models/user.server.model.js file add the following code:

```javascript
var mongoose = require('mongoose'),
  crypto = require('crypto'),
  Schema = mongoose.Schema;

var UserSchema = new Schema({
  name: String,
  email: String,
  username: {
    type: String,
    trim: true,
    unique: true
  },
  password: String,
  provider: String,
  providerId: String,
  providerData: {},
  todos: {}//we will use this in the next tutorial to store TODOs
});

UserSchema.pre('save',
  function(next) {
    if (this.password) {
      var md5 = crypto.createHash('md5');
      this.password = md5.update(this.password).digest('hex');
    }

    next();
  }
);

UserSchema.methods.authenticate = function(password) {
  var md5 = crypto.createHash('md5');
  md5 = md5.update(password).digest('hex');

  return this.password === md5;
};

UserSchema.statics.findUniqueUsername = function(username, suffix, callback) {
  var _this = this;
  var possibleUsername = username + (suffix || '');

  _this.findOne(
    {username: possibleUsername},
    function(err, user) {
      if (!err) {
        if (!user) {
          callback(possibleUsername);
        }
        else {
          return _this.findUniqueUsername(username, (suffix || 0) + 1, callback);
        }
      }
      else {
        callback(null);
      }
    }
  );
};

mongoose.model('User', UserSchema);
```

- In the ./app/controllers/users.server.controller.js file add the following code:

```javascript
var User = require('mongoose').model('User'),
  passport = require('passport');

var getErrorMessage = function(err) {
  var message = '';
  if (err.code) {
    switch (err.code) {
      case 11000:
      case 11001:
        message = 'Username already exists';
        break;
      default:
        message = 'Something went wrong';
    }
  }
  else {
    for (var errName in err.errors) {
      if (err.errors[errName].message)
        message = err.errors[errName].message;
    }
  }

  return message;
};

exports.renderLogin = function(req, res, next) {
  if (!req.user) {
    res.render('login', {
      title: 'Log-in Form',
      messages: req.flash('error') || req.flash('info')
    });
  }
  else {
    return res.redirect('/');
  }
};

exports.renderRegister = function(req, res, next) {
  if (!req.user) {
    res.render('register', {
      title: 'Register Form',
      messages: req.flash('error')
    });
  }
  else {
    return res.redirect('/');
  }
};

exports.register = function(req, res, next) {
  if (!req.user) {
    var user = new User(req.body);
    var message = null;
    user.provider = 'local';
    user.save(function(err) {
      if (err) {
        var message = getErrorMessage(err);
        req.flash('error', message);
        return res.redirect('/register');
      }

      req.login(user, function(err) {
        if (err)
          return next(err);

        return res.redirect('/');
      });
    });
  }
  else {
    return res.redirect('/');
  }
};

exports.logout = function(req, res) {
  req.logout();
  res.redirect('/');
};
```

- In the routes/users.server.routes.js file add the following code:

```javascript
var users = require('../../app/controllers/users.server.controller');

module.exports = function(app) {
  app.route('/users').post(users.create).get(users.list);
  app.route('/users/:userId').get(users.read).put(users.update).delete(users.delete);
  app.param('userId', users.userByID);
  app.route('/register')
    .get(users.renderRegister)
    .post(users.register);

  app.route('/login').get(users.renderLogin).post(passport.authenticate('local', {
    successRedirect: '/',
    failureRedirect: '/login',
    failureFlash: true
  }));

  app.get('/logout', users.logout);
};
```


- In the strategies/local.js file add the following code:

```javascript
var passport = require('passport'),
  LocalStrategy = require('passport-local').Strategy,
  User = require('mongoose').model('User');

module.exports = function() {
  passport.use(new LocalStrategy(function(username, password, done) {
    User.findOne(
      {username: username},
      function(err, user) {
        if (err) {
          return done(err);
        }

        if (!user) {
          return done(null, false, {message: 'Unknown user'});
        }

        if (!user.authenticate(password)) {
          return done(null, false, {message: 'Invalid password'});
        }

        return done(null, user);
      }
    );
  }));
};
```


- In the strategies/passport.js file add the following code:

```javascript
var passport = require('passport'),
  mongoose = require('mongoose');

module.exports = function() {
  var User = mongoose.model('User');

  passport.serializeUser(function(user, done) {
    done(null, user.id);
  });

  passport.deserializeUser(function(id, done) {
    User.findOne(
      {_id: id},
      '-password',
      function(err, user) {
        done(err, user);
      }
    );
  });

  require('./strategies/local.js')();
};
```


- In the views/login.ejs file add the following code:

```html
<!DOCTYPE html>
<html>
<head>
  <title><%= title %></title>
  <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="http://getbootstrap.com/examples/signin/signin.css" rel="stylesheet">
</head>
<body>
  <% for(var i in messages) { %>
    <div class="flash"><%= messages[i] %></div>
  <% } %>

  <div class="container">
    <form class="form-signin" action="/login" method="post">
      <h2 class="form-signin-heading text-center">Open, says me</h2>

      <label for="username" class="sr-only">Username</label>
      <input type="text" name="username" id="username" class="form-control" placeholder="Username" required autofocus>

      <label for="password" class="sr-only">Password</label>
      <input type="password" name="password" id="password" class="form-control" placeholder="Password">

      <button class="btn btn-lg btn-primary btn-block" type="submit">Login</button>
    </form>

    <div class="row">
      <div class="center-block text-center">
        <a href="/oauth/facebook">Login with Facebook</a> |
        <a href="/oauth/twitter">Login with Twitter</a>
      </div>
    </div>
  </div><!-- container -->
</body>
</html>
```


- In the views/register.ejs file add the following code:

```html
<!DOCTYPE html>
<html>
<head>
  <title><%=title %></title>

  <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="http://getbootstrap.com/examples/signin/signin.css" rel="stylesheet">
</head>
<body>
  <% for(var i in messages) { %>
    <div class="flash"><%= messages[i] %></div>
  <% } %>

  <div class="container">
    <form class="form-signin" action="/register" method="post">
      <h2 class="form-signin-heading text-center">Register</h2>

      <label for="username" class="sr-only">Username</label>
      <input type="text" id="username" name="username" class="form-control" placeholder="Username" required autofocus>

      <label for="name" class="sr-only">Name</label>
      <input type="text" id="name" name="name" class="form-control" placeholder="Name" required autofocus>

      <label for="email" class="sr-only">E-mail</label>
      <input type="email" id="email" name="email" class="form-control" placeholder="E-mail" required>

      <label for="password" class="sr-only">Password</label>
      <input type="password" name="password" id="password" class="form-control" placeholder="Password" required>

      <button class="btn btn-lg btn-primary btn-block" type="submit">Register</button>
    </form>

    <div class="row">
      <div class="center-block text-center">
        <a href="/oauth/facebook">Login with Facebook</a> |
        <a href="/oauth/twitter">Login with Twitter</a>
      </div>
    </div>
  </div><!-- container -->
</body>
</html>

```


- In the x file add the following code:

```javascript

```


- In the x file add the following code:

```javascript

```





