* Install Mongoose with `npm install mongoose --save`
* Create a file called development.js in `./config/env` and add the following code:
var port = 3000;

module.exports = {
  port: port,
  db: 'mongodb://localhost/public_comics_angular'
};

* Create a file called mongoose.js in `./config/` and add the following code:
var config = require('./config'),
  mongoose = require('mongoose');

module.exports = function() {
  var db = mongoose.connect(config.db);
  return db;
};

* Create a file called config.js in `./config/` and add the following code:
module.exports = require('./env/' + process.env.NODE_ENV + '.js');

* Set the NODE_ENV enviornment variable by running `export NODE_ENV=development` in the terminal.
* Replace the code in the ./server.js file with the following:
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

var config = require('./config/config'),
  mongoose = require('./config/mongoose'),
  express = require('./config/express'),

var db = mongoose(),
  app = express();

app.listen(config.port);

module.exports = app;
console.log(process.env.NODE_ENV  + ' server running at http://localhost:' + config.port);

Creating a new Mongoose model
--

* To create a new model schema, create a new file named user.server.model.js in the app/models folder and paste the following code:
var mongoose = require('mongoose'),
var Schema = mongoose.Schema;

var UserSchema = new Schema({
  name: String,
  email: String,
  username: String,
  password: String,
});

mongoose.model('User', UserSchema);

* In order to use the User model, you need to include this file by adding the following require in the config/mongoose.js file (just before the return db; statement):
require('../app/models/user.server.model');

* In order to keep things nice and tidy, youâ€™ll create a Users controller which will handle all the requests for user related operations. In the app/controllers folder create a users.server.controller.js file and place the following code in it:
var User = require('mongoose').model('User');

exports.create = function(req, res, next) {
  var user = new User(req.body);
  user.save(function(err) {
    if (err) {
      return next(err);
    }
    else {
      res.json(user);
    }
  });
};

* In the app/routes folder create a file named users.server.routes.js and paste the following code:
var users = require('../../app/controllers/users.server.controller');

module.exports = function(app) {
  app.route('/users').post(users.create);
};

* In the config/express.js file add the following route definition:
require('../app/routes/users.server.routes.js')(app);

* In order to list existing users add the following code to your app/controllers/user.server.controller.js file:
exports.list = function(req, res, next) {
  User.find({}, function(err, users) {
    if (err) {
      return next(err);
    }
    else {
      res.json(users);
    }
  });
};

* Now you need to set up a route for this new method and in order to do so, go to your app/routes/users.server.routes.js file and add:
app.route('/users').get(users.list);

* So, previous functionality gives you the list of all the users, but in order to show only one specific user in the app/controllers/users.server.controller.js file add the following code:
exports.read = function(req, res) {
  res.json(req.user);
};

* Now add the following to app/routes/users.server.routes.js:
app.route('/users/:userId').get(users.read);
app.param('userId', users.userByID);

* In your app/controllers/users.server.controller.js file add a new update() method:
exports.update = function(req, res, next) {
  User.findByIdAndUpdate(req.user.id, req.body, function(err, user) {
    if (err) {
      return next(err);
    }
    else {
      res.json(user);
    }
  });
};

* * Now add the following to app/routes/users.server.routes.js:
app.route('/users/:userId').get(users.read).put(users.update);

* In your app/controllers/users.server.controller.js file add a new delete() method:
exports.delete = function(req, res, next) {
  req.user.remove(function(err) {
    if (err) {
      return next(err);
    }
    else {
      res.json(req.user);
    }
  })
};

* Now, in app/routes/users.server.routes.js file change the route with the userId parameter to be like this:
app.route('/users/:userId').get(users.read).put(users.update).delete(users.delete);
