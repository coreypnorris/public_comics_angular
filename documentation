Problem Solving Documentation

Brand new project
--
* Run `npm init` to create the package.json file. When it asks you for a entry point, enter server.js instead of default index.js.
* Install express and morgan with `npm install express morgan --save`
* Create a file named server.js and copy/paste the following content in it:
var port = 3000;
var express = require('./config/express');
var app = express();
app.listen(port);
module.exports = app;
console.log('Server running at http://localhost:' + port);

* Run the following command to create the basic express MVC folders:
`mkdir app && cd app && mkdir controllers && mkdir models && mkdir routes && mkdir views && cd .. && mkdir config && cd config && mkdir env && cd .. && mkdir public && cd public && mkdir css && mkdir img && mkdir js && cd ..`

* Install ejs and body parser with `npm install ejs body-parser --save`
* Create a file named express.js in the config folder and add the following code:
var express = require('express');
var logger = require('morgan');
var bodyParser = require('body-parser');

module.exports = function() {
  var app = express();
  app.set('views', './app/views');
  app.set('view engine', 'ejs');
  app.use(express.static('./public'));

  app.use(bodyParser.urlencoded({
    extended: true
  }));

  app.use(bodyParser.json());

  require('../app/routes/index.server.routes.js')(app);
  require('../app/routes/users.server.routes.js')(app);

  app.use(logger('default'));

  // Handle 404
  app.use(function(req, res, next) {
      res.status(404).sendfile('./error/404.html');
  });

  return app;
};

* Create a file callex index.server.controller.js in the app/controllers folder and add the following code:
exports.render = function(req, res) {
    res.render('index', {
        title: 'Howdy World'
    })
};

* Create a file callex index.server.routes.js in the app/routes folder and add the following code:
module.exports = function(app) {
    var index = require('../controllers/index.server.controller');
    app.get('/', index.render);
};

* Create a file callex index.ejs in the app/views folder and add the following code:
<!DOCTYPE html>
<html>
<head>
  <title><%= title %></title>
</head>
<body>
  <h1><%= title %></h1>
</body>
</html>

* Install Mongoose with `npm install mongoose --save`
* Create a file called development.js in `./config/env` and add the following code:
var port = 3000;

module.exports = {
  port: port,
  db: 'mongodb://localhost/public_comics_angular'
};

* Create a file called mongoose.js in `./config/` and add the following code:
var config = require('./config'),
  mongoose = require('mongoose');

module.exports = function() {
  var db = mongoose.connect(config.db);
  return db;
};

* Create a file called config.js in `./config/` and add the following code:
module.exports = require('./env/' + process.env.NODE_ENV + '.js');

* Set the NODE_ENV enviornment variable by running `export NODE_ENV=development` in the terminal.
* Replace the code in the ./server.js file with the following:
process.env.NODE_ENV = process.env.NODE_ENV || 'development';

var config = require('./config/config'),
  mongoose = require('./config/mongoose'),
  express = require('./config/express'),

var db = mongoose(),
  app = express();

app.listen(config.port);

module.exports = app;
console.log(process.env.NODE_ENV  + ' server running at http://localhost:' + config.port);

Creating a new Mongoose model
--

* To create a new model schema, create a new file named user.server.model.js in the app/models folder and paste the following code:
var mongoose = require('mongoose'),
var Schema = mongoose.Schema;

var UserSchema = new Schema({
  name: String,
  email: String,
  username: String,
  password: String,
});

mongoose.model('User', UserSchema);

* In order to use the User model, you need to include this file by adding the following require in the config/mongoose.js file (just before the return db; statement):
require('../app/models/user.server.model');

* In order to keep things nice and tidy, youâ€™ll create a Users controller which will handle all the requests for user related operations. In the app/controllers folder create a users.server.controller.js file and place the following code in it:
var User = require('mongoose').model('User');

exports.create = function(req, res, next) {
  var user = new User(req.body);
  user.save(function(err) {
    if (err) {
      return next(err);
    }
    else {
      res.json(user);
    }
  });
};

* In the app/routes folder create a file named users.server.routes.js and paste the following code:
var users = require('../../app/controllers/users.server.controller');

module.exports = function(app) {
  app.route('/users').post(users.create);
};

* In the config/express.js file add the following route definition:
require('../app/routes/users.server.routes.js')(app);

* In order to list existing users add the following code to your app/controllers/user.server.controller.js file:
exports.list = function(req, res, next) {
  User.find({}, function(err, users) {
    if (err) {
      return next(err);
    }
    else {
      res.json(users);
    }
  });
};

* Now you need to set up a route for this new method and in order to do so, go to your app/routes/users.server.routes.js file and add:
app.route('/users').get(users.list);

* So, previous functionality gives you the list of all the users, but in order to show only one specific user in the app/controllers/users.server.controller.js file add the following code:
exports.read = function(req, res) {
  res.json(req.user);
};

* Now add the following to app/routes/users.server.routes.js:
app.route('/users/:userId').get(users.read);
app.param('userId', users.userByID);

* In your app/controllers/users.server.controller.js file add a new update() method:
exports.update = function(req, res, next) {
  User.findByIdAndUpdate(req.user.id, req.body, function(err, user) {
    if (err) {
      return next(err);
    }
    else {
      res.json(user);
    }
  });
};

* * Now add the following to app/routes/users.server.routes.js:
app.route('/users/:userId').get(users.read).put(users.update);

* In your app/controllers/users.server.controller.js file add a new delete() method:
exports.delete = function(req, res, next) {
  req.user.remove(function(err) {
    if (err) {
      return next(err);
    }
    else {
      res.json(req.user);
    }
  })
};

* Now, in app/routes/users.server.routes.js file change the route with the userId parameter to be like this:
app.route('/users/:userId').get(users.read).put(users.update).delete(users.delete);

Using MongoDB via console
--
* `mongod` Starts the server
* `mongo shell` connect to the MongoDB console

While in the MongoDB console
--
* `show dbs` get list of available databases
* `use name_of_database` connect to a database
* `show collections` get list of collections in the current database

Create
--
You can use three commands to create documents in MongoDB:

* Insert: `db.todos.insert({"title":"Write a post", "user": "nikola"})`
* Update: usually used to update an existing document, but if you set the upsert flag, it will create a new document if it does not exist:
`db.todos.update({
  "user": "nikola"
  },
  {
    "title": "Buy Bitcoins",
    "user": "nikola"
  },
  {
    upsert: true
  }
)`
* Save: creates a new document even if the exact one (content wise) exists:
`db.todos.save({"title":"Write a post", "user": "nikola"})`

Read
--
* To find all the documents of the todos collection, execute:
`db.todos.find()`

* To find all the todos of the user nikola execute:
`db.todos.find({ "user": "nikola" })`

* To find all todos that were created by either nikola or josipa, you can use the $in operator:
`db.todos.find({ "user": { $in: ["josipa", "nikola"] } })`

* Another way to find all todos that were created by either nikola or josipa:
`db.todos.find( { $or: [{ "user": "nikola" }, { "user": "josipa" }] })`

* To find all todos that were created by nikola and have a priority greater than 3:
`db.todos.find({ "user": "nikola", "priority": { $gt: 3 } })`

Update
--
* The update() method takes three arguments to update existing documents: selection that indicates which documents to update, update statement, and the options object.

In the following example, the first argument is telling MongoDB to look for all the documents created by nikola (in the todos collection), the second argument tells it to update the title field, and the third is forcing it to execute the update operation on all the documents it finds, since the default behavior is to update a single document:

Delete
--
* To remove all the documents from the todos collection execute:
`db.todos.remove()`

* To remove the first document from the todos collection made by user nikola execute:
`db.todos.remove({ "user": "nikola" }, true)`

* In order to remove all of the documents made by nikola in the todos collection just omit the true flag.
`db.todos.update({
  "user": "nikola"
  },
  {
    $set: {
      "title": "Postpone blog post"
    }
  },
  {
    multi: true
  }
)`

Add Angular, Jquery, Normalize, Bootstrap, and Fontawesome with Bower
--
* Create the bower file with `bower init`
* Add the bower packages with `bower install jquery angular normalize.css bootstrap fontawesome  --save`
* Add the bower packages to the `./views/index.ejs` file:
<script src='/bower_components/jquery/dist/jquery.js'></script>
<script src='/bower_components/angular/angular.js'></script>
<link rel='stylesheet' href='/bower_components/normalize.css/normalize.css' />
<link rel='stylesheet' href='/bower_components/fontawesome/css/font-awesome.css' />
<link rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.css' />

Add Gulp, Sass, and Live Reload
--
* Install the packages with `npm install --save-dev gulp gulp-shell gulp-livereload gulp-ruby-sass`
* Create the sass folder and file `./public/sass/sass.scss`
* Add the sass file in `./views/index.ejs`:
<link rel='stylesheet' href='/stylesheets/sass.css' />
* Create the gulpfile `./gulpfile.js` and add the following code:
var gulp = require('gulp');
var sass = require('gulp-ruby-sass');
var shell = require('gulp-shell');
var livereload = require('gulp-livereload');

gulp.task('npmInstall', shell.task([
  'npm install',
]));

gulp.task('compileSass', ['npmInstall'], function() {
  return sass('./public/sass/sass.scss', { style: 'compressed' })
    .pipe(gulp.dest('./public/stylesheets/'))
    .pipe(livereload());
});

gulp.task('watch', ['npmInstall', 'compileSass'], function() {
  var server = livereload();
  gulp.watch('./public/sass/sass.scss', ['compileSass']);
});

gulp.task('copyBowerComponents', ['npmInstall', 'compileSass', 'watch'], function () {
  gulp.src('./bower_components/**')
    .pipe(gulp.dest('./public/bower_components'));
});

gulp.task('start', ['npmInstall', 'compileSass', 'watch', 'copyBowerComponents'], shell.task([
  'npm install',
  'node ./bin/www'
]));

gulp.task('default', ['compileSass', 'watch', 'copyBowerComponents', 'start']);

* Now we can use the `gulp` command to start our app server

Add Angular to an app
--
* Replace the contents of the body tag in ./views/index.ejs with:
<div class="container">
  <div ng-app="angularApp">
      <div ui-view></div>
    </div>
  </div>
</div>
* create `./public/javascripts/angularApp.js` and include it in the index.html file:
<script src='/javascripts/angularApp.js'></script>
* in main.js add the following code.
angular
  .module('angularApp', [

  ]);

Adding a new page in an angular app
--

* create the state to handle the route
* create the template to render the html
* create the controller to handle the logic

Add a partial template in Angular app
--
* create a partial in the templates folder. For example: templates/nav.html
* add it to the index.html page like this
  <header ng-include="'templates/nav.html'"></header>

Adding a simple routes in Angular
--
* Install ui-router
* add the following dependencies to the app in the main.js file
angular
  .module('app', [
    'ui.router'
  ])
  .config(['$urlRouterProvider', '$stateProvider', function($urlRouterProvider, $stateProvider) {

  }]);

* add the default route
angular
  .module('app', [
    'ui.router'
  ])
  .config(['$urlRouterProvider', '$stateProvider', function($urlRouterProvider, $stateProvider) {
    $urlRouterProvider.otherwise('/');
  }])

* add some states
angular
  .module('app', [
    'ui.router'
  ])
  .config(['$urlRouterProvider', '$stateProvider', function($urlRouterProvider, $stateProvider) {
    $urlRouterProvider.otherwise('/');

    $stateProvider
      .state('home', {
        url: '/',
        templateUrl: 'templates/home.html'
      })
      .state('about', {
        url: '/about',
        templateUrl: 'templates/about.html'
      });
  }]);

* Add the home.html and about.html template files

Adding controller logic
--
* Create a controllers folder in app/scripts/controllers
* Create a home controller file in app/scripts/controllers/homeCtrl.js
* Add the logic in the homeCtrl.js file
angular
  .module('app')
  .controller('homeCtrl', ['$scope', function($scope) {
    $scope.title = 'Home';
    $scope.items = ['item1', 'item2', 'item3'];
  }]);

* Add the controller file to the index.html file
<script src="scripts/main.js"></script>
<script src="scripts/controllers/homeCtrl.js"></script>

* Add the home controller to the home state
angular
  .module('app', [
    'ui.router'
  ])
  .config(['$urlRouterProvider', '$stateProvider', function($urlRouterProvider, $stateProvider) {
    $urlRouterProvider.otherwise('/');

    $stateProvider
      .state('home', {
        url: '/',
        templateUrl: 'templates/home.html',
        controller: 'homeCtrl'
      })
      .state('about', {
        url: '/about',
        templateUrl: 'templates/about.html'
      });
  }]);

* Add the variables to the templates/home file
<h1>{{title}}</h1>
<ul>
  <li ng-repeat="item in items">{{item}}</li>
</ul>


Features Roadmap
--
About Page
Authentication
Uploading comics
Displaying comics
Reading comics

